Explore Card - RECURSION

Problem 1 - Pascal's Triangle II
class Solution {
public:
    vector<int> getRow(int rowIndex) {
        if(rowIndex == 0)
        {
            vector<int> a{ 1 };
            return a;
        }
        if(rowIndex == 1)
        {
            vector<int> a{1,1};
            return a;
        }
        vector<int> ans;
        vector<int> temp = getRow(rowIndex-1);
        //vector<int> temp1;
        /*temp = getRow(rowIndex-1);
        vector<int> temp1;
        for(int i = 0;i<temp.size();i++)
        {
            temp1.push_back(temp[i]);
        }
        temp.push_back(0);
        //temp1.insert(temp1.begin(), 0);
        for(int i = 0;i<temp.size();i++)
        {
            ans.push_back(temp[i] + temp1[i-1]);
        }*/
        ans.push_back(temp[0]);
        int i = 0;
        for(i = 0;i<temp.size()-1;i++) {
        //    cout<<temp.size();
            ans.push_back(temp[i]+temp[i+1]);
          //  cout<<endl<<"adsfsdf"<<endl;
        }
        ans.push_back(temp[0]);
        //cout<<"i = "<<i;
        //cout<<"ans"<<ans[1];
        return ans;
    }
};




Problem 2 - Fibonacci Number
class Solution {
public:
    int fib(int n) {
         unordered_map<int, int> umap;
        auto func1 = [&umap](int i, auto& func1) 
        {
            if(umap.find(i) != umap.end())
            {
                return umap[i]; 
            }
            int res;
            if(i<2)
            {
                return i;
            }
            
            res =  func1(i-1,func1) + func1(i-2,func1); 
            
            umap[i] = res;
            
            return res;
        };
        
        return func1(n, func1);
        
    }
};



Problem 3 - Climbing Stairs
class Solution {
public:
    int climbStairs(int n) {
        
        unordered_map<int,int> umap;
        
        auto func1 = [&umap](int n, auto &func1)
        {
            if(umap.find(n) != umap.end())
            {
                return umap[n];
            }
            if(n==1)
            {
                return 1;
            }
            if(n==2)
                return 2;
            
            int res;
            res = func1(n-1,func1)+func1(n-2,func1);
            umap[n] = res;
            return res;
        };
        
        
        return func1(n,func1);
    }
};
